---
layout: post
title: "Linux学习笔记(13)-awk"
date: 2017-3-6 
description: "Linux学习笔记(13)-awk"
tag: Linux
---   

## 前言

awk是一个Linux中一个好用的数据处理工具，在实际应用中十分频繁。
相对于sed经常作用于一整行的处理，awk比较倾向于将一行分成数个“字段”来处理。
因此，awk适合小型的数据处理。
awk默认通过空格和[tab]键将每行数据进行分隔，然后根据给定的动作执行相应的后续操作。
它既可以处理文件，也可以处理管道的数据。

* [1.基本用法](#1)

* [2.内置变量](#2)

* [3.条件类型](#3)

****


<h2 id="1">1.基本用法 </h2>


其基本用法如下：

    [root@localhost ~]# awk '条件类型1{动作1}条件类型2{动作2}...'  filename

awk后面接的两个单引号并加上花括号，表示想要对数据进行的处理动作。例如

    [root@localhost ~]# awk '{print $1 "\t" $3}' filename

表示，将filename中的每一行数据进行分隔，输出第1个和第3个字段，中间用"\t"分开。

通常，awk用美元符号$后面跟数字代表该行的第几个字段。如果是$0，则代表一整行。


****



<h2 id="2">2.内置变量 </h2>


awk里面内置了很多变量，方便执行复杂动作。

 NF: 每一行拥有的字段总数

 NR: 目前aw所处理的是“第几行”数据，即当前数据的行号

 FS: 目前的分隔字符，默认是空格

例子：

    [root@localhost ~]# awk '{print $1 "\t lines:" NR "\t columes" NF}' filename
    root   lines: 1  columes:10
    root   lines: 2  columes:10
    root   lines: 3  columes:10
    root   lines: 4  columes:10
    root   lines: 5  columes:9

双引号中的是指定字符串，如本例中的"\t lines:"等。

输出的NR代表本行行号，输出NF代表本行有多少字段。


****


<h2 id="3">3.条件类型 </h2>


awk的用法是：

  [root@localhost ~]# awk '条件类型1{动作1}条件类型2{动作2}...'  filename

上面介绍了“动作”，现在介绍“条件类型”。




***

